package com.github.kornilova203.flameviewer.flight_parser;

import org.openjdk.jmc.common.item.IItem;
import org.openjdk.jmc.common.item.IItemCollection;
import org.openjdk.jmc.common.item.IItemIterable;
import org.openjdk.jmc.common.item.ItemFilters;
import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;
import org.openjdk.jmc.flightrecorder.JfrLoaderToolkit;
import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * FlightParser parses jfr files that were generated by Java 9 Flight Recorder.
 * As a result it generates stacks: Map<String, Integer>
 * where key is a stack (method calls are separated by semicolon
 * and value is how many times this stack was present in the jfr file.
 */
public class FlightParser {
    private Map<String, Integer> stacks = new HashMap<>();

    /**
     * @param file jfr file
     */
    @SuppressWarnings("WeakerAccess")
    public FlightParser(File file) {
        validateFile(file);
        try {
            IItemCollection collection = JfrLoaderToolkit.loadEvents(file);
            buildStacks(collection);
        } catch (IOException | CouldNotLoadRecordingException e) {
            e.printStackTrace();
            stacks = null;
        }
    }

    public Map<String, Integer> getStacksMap() {
        return stacks;
    }

    public String getStacks() {
        StringBuilder stringBuilder = new StringBuilder();
        for (String stack : stacks.keySet()) {
            int num = stacks.get(stack);
            stringBuilder.append(String.format("%s %d%n", stack, num));
        }
        return stringBuilder.toString();
    }

    private void validateFile(File file) {
        if (!file.exists()) {
            throw new IllegalArgumentException("File " + file + " does not exist");
        }
        if (!file.isFile()) {
            throw new IllegalArgumentException(file + " is not a file");
        }
    }

    private void buildStacks(IItemCollection collection) {
        try {
            JfrFrameAccessor jfrFrameAccessor = new JfrFrameAccessor();

            /* stacktraces are located in execution samples */
            IItemCollection executionSamples = collection.apply(ItemFilters.type(JdkTypeIDs.EXECUTION_SAMPLE));

            for (IItemIterable iItems : executionSamples) {
                for (IItem iItem : iItems) {
                    String stack = jfrFrameAccessor.getStack(iItem);
                    int value = stacks.computeIfAbsent(stack, s -> 0);
                    stacks.put(stack, value + 1);
                }
            }
        } catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException e) {
            /* reflection warns about lots of exceptions */
            e.printStackTrace();
        }
    }
}
